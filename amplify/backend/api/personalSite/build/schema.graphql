type VaccineDataPoint @aws_iam @aws_api_key {
  date: String!
  vaccinations: Int!
  id: ID!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelVaccineDataPointConnection @aws_api_key @aws_iam {
  items: [VaccineDataPoint]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelVaccineDataPointFilterInput {
  date: ModelStringInput
  vaccinations: ModelIntInput
  id: ModelIDInput
  and: [ModelVaccineDataPointFilterInput]
  or: [ModelVaccineDataPointFilterInput]
  not: ModelVaccineDataPointFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getVaccineDataPoint(id: ID!): VaccineDataPoint @aws_api_key @aws_iam
  listVaccineDataPoints(filter: ModelVaccineDataPointFilterInput, limit: Int, nextToken: String): ModelVaccineDataPointConnection @aws_api_key @aws_iam
  syncVaccineDataPoints(filter: ModelVaccineDataPointFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelVaccineDataPointConnection @aws_api_key @aws_iam
}

input CreateVaccineDataPointInput {
  date: String!
  vaccinations: Int!
  id: ID
  _version: Int
}

input UpdateVaccineDataPointInput {
  date: String
  vaccinations: Int
  id: ID!
  _version: Int
}

input DeleteVaccineDataPointInput {
  id: ID
  _version: Int
}

type Mutation {
  createVaccineDataPoint(input: CreateVaccineDataPointInput!, condition: ModelVaccineDataPointConditionInput): VaccineDataPoint @aws_api_key @aws_iam
  updateVaccineDataPoint(input: UpdateVaccineDataPointInput!, condition: ModelVaccineDataPointConditionInput): VaccineDataPoint @aws_api_key @aws_iam
  deleteVaccineDataPoint(input: DeleteVaccineDataPointInput!, condition: ModelVaccineDataPointConditionInput): VaccineDataPoint @aws_api_key @aws_iam
}

input ModelVaccineDataPointConditionInput {
  date: ModelStringInput
  vaccinations: ModelIntInput
  and: [ModelVaccineDataPointConditionInput]
  or: [ModelVaccineDataPointConditionInput]
  not: ModelVaccineDataPointConditionInput
}

type Subscription {
  onCreateVaccineDataPoint: VaccineDataPoint @aws_subscribe(mutations: ["createVaccineDataPoint"]) @aws_api_key @aws_iam
  onUpdateVaccineDataPoint: VaccineDataPoint @aws_subscribe(mutations: ["updateVaccineDataPoint"]) @aws_api_key @aws_iam
  onDeleteVaccineDataPoint: VaccineDataPoint @aws_subscribe(mutations: ["deleteVaccineDataPoint"]) @aws_api_key @aws_iam
}
